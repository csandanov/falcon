# Environment variables (set these via CircleCI GUI):
# - PLATFORM_TOKEN (platform.sh machine token for CLI to authenticate)
# - PLATFORM_PROJECT_NAME (machine name of your project. Looks like "dwnzfswdl2o3e").
# - PLATFORM_HTTP_AUTH_USERNAME (http auth username to protect environments)
# - PLATFORM_HTTP_AUTH_PASSWORD (http auth password to protect environments)

general:
  artifacts:
    - "backend-gifts/tests/codeception/tests/_output/"
    - "backend-donations/tests/codeception/tests/_output/"

# Set php version to use inside of container.
machine:
  php:
    version: 7.1.0
  node:
    version: 6.1.0

dependencies:
  cache_directories:
    - "~/flc/vendor"

  pre:
    # Workaround for this issue:
    # https://discuss.circleci.com/t/git-errors-failing-the-build-when-deploying-to-heroku/776
    # Without this lines git throws fatal error trying to push anything to platform.
    - "[[ ! -s \"$(git rev-parse --git-dir)/shallow\" ]] || git fetch --unshallow"

    - echo $PLATFORM_PROJECT_NAME

    - git remote remove platform

    # Add Platform.sh remote to git configuration.
    - |
      if ! git config remote.platform.url > /dev/null; then
        git remote add platform $PLATFORM_PROJECT_NAME@git.eu.platform.sh:$PLATFORM_PROJECT_NAME.git
      fi

    # Get list of root folders changed in this branch in comparison to the master branch.
    # Later we're going to run tests and code reviews only for changed applications.
    - |
      GIT_CHANGES=$(git diff --name-only origin/stage...$CIRCLE_BRANCH . | cut -d '/' -f1 | uniq | paste -sd ',' -)
      echo $GIT_CHANGES # Just debug outout.
      echo "export GIT_CHANGES=$GIT_CHANGES" >> ~/.circlerc

    # Install platform.sh CLI.
    # See https://github.com/platformsh/platformsh-cli for reference.
    - curl -sS https://platform.sh/cli/installer | php

    # Final platform.sh CLI installation step.
    # Making it available globally.
    - sudo ln -s ~/.platformsh/bin/platform /usr/local/bin/platform

    # Copy authentication tokens to make platform.sh CLI authorized in CircleCI.
    - echo $PLATFORM_TOKEN > ~/.platformsh/token
    - cp .platform/config.yaml ~/.platformsh/config.yaml

    # Create a snapshot before pushing to either master or stage.
    - |
      if [ $CIRCLE_BRANCH == "master" ] || [ $CIRCLE_BRANCH == "stage" ]; then
        platform snapshot:create --yes
      fi

    # Push all branch changes to platform's git repository.
    # This will start applications build process at platform.sh.
    - git push --force platform $CIRCLE_BRANCH

    # Build a new environment on platform.sh using db/files from the MASTER environment.
    - platform environment:activate -y --project $PLATFORM_PROJECT_NAME --parent=master $CIRCLE_BRANCH

    # Clone database from parent environment if [db sync] is presented in commit message.
    # Always true for STAGE environment.
    - |
      # Check for [db sync] in git commit message. $? will be 1 (error) if not [db sync] is not found.
      git log --format=%B -n 1 $CIRCLE_SHA1 | grep "\[db sync\]"
      if [ $? -ne 1 ] || [ $CIRCLE_BRANCH == "stage" ]; then
        platform sync data -y
      fi

    # DO NOT restrict access to the environment via http.
    # CORS doesn't work with http auth on Nginx level because most browsers send
    # OPTIONS requests without auth credentials.
    #- platform environment:http-access -y --project $PLATFORM_PROJECT_NAME --environment $CIRCLE_BRANCH --auth $PLATFORM_HTTP_AUTH_USERNAME:$PLATFORM_HTTP_AUTH_PASSWORD

    # Install Codeception for test suite.
    # Install Coder (Drupal plugin for PHP CodeSniffer).
    # See https://www.drupal.org/project/coder
    - |
      if [ ! -d ~/flc/vendor ]; then
        # TODO: Move to Circle's composer.json
        composer require codeception/codeception:^2.3.5
        composer require drupal/coder
        composer require flow/jsonpath stripe/stripe-php paypal/rest-api-sdk-php
      fi

    # Configure PHP Code Sniffer to recognize Drupal coding standards.
    # See https://www.drupal.org/node/1419988
    - ./vendor/bin/phpcs --config-set installed_paths ~/flc/vendor/drupal/coder/coder_sniffer

    # Start the PhantomJS webdriver.
    - phantomjs --webdriver=4445 --ignore-ssl-errors=true:
        background: true

    # Start ChromeDriver.
    - chromedriver --url-base=wd/hub --port=9515:
        background: true

    # Enable emails on Platform.sh. Important: can trigger re-deploy.
    - |
      if [ $CIRCLE_BRANCH != "master" ]; then
        platform environment:info enable_smtp true
      fi

    # Print last 100 lines of deploy log in circle for quick access from circle.
    - platform ssh --app=backend-donations "tail -n 100 /tmp/log/deploy.log" || true
    - platform ssh --app=backend-gifts "tail -n 100 /tmp/log/deploy.log" || true
    - platform ssh --app=frontend-gifts "tail -n 100 /tmp/log/deploy.log" || true

    # Get Gifts URL from platform.
    - |
      BACKEND_GIFTS_URL="$(platform route:get --project=$PLATFORM_PROJECT_NAME --environment=$CIRCLE_BRANCH --app=backend-gifts --property=url https://gifts.api.\{default\}/)"
      echo "export BACKEND_GIFTS_URL=$BACKEND_GIFTS_URL" >> ~/.circlerc

    # Get Donations URL from platform.
    - |
      BACKEND_DONATIONS_URL="$(platform route:get --project=$PLATFORM_PROJECT_NAME --environment=$CIRCLE_BRANCH --app=backend-donations --property=url https://donations.api.\{default\}/)"
      echo "export BACKEND_DONATIONS_URL=$BACKEND_DONATIONS_URL" >> ~/.circlerc

    # Get Frontend Gifts URL from platform.
    - |
      FRONTEND_GIFTS_URL="$(platform route:get --project=$PLATFORM_PROJECT_NAME --environment=$CIRCLE_BRANCH --app=frontend-gifts --property=url https://www.\{default\}/)"
      echo "export FRONTEND_GIFTS_URL=$FRONTEND_GIFTS_URL" >> ~/.circlerc

    # Get API Bus URL from platform.
    - |
      ABI_BUS_URL="$(platform route:get --project=$PLATFORM_PROJECT_NAME --environment=$CIRCLE_BRANCH --app=frontend-gifts --property=url https://api.\{default\}/)"
      echo "export ABI_BUS_URL=$ABI_BUS_URL" >> ~/.circlerc

test:
#  pre:

      #################################################
      ########## GIFTS BACKEND CODE REVIEW ############
      #################################################

      # Drupal coding standards &  best practice compliance.
#      - |
#        if [[ $GIT_CHANGES == *"backend-gifts"* || $CIRCLE_BRANCH == "stage" ]]; then
#          ./vendor/bin/phpcs --error-severity=1 --warning-severity=5 --standard=Drupal,DrupalPractice ./backend-gifts/web/modules/custom
#        fi
      #################################################
      ########## GIFTS FRONTEND CODE REVIEW ###########
      #################################################

      # Run ESLint for the frontend Gifts application.
#      - |
#        if [[ $GIT_CHANGES == *"frontend-gifts"* || $CIRCLE_BRANCH == "stage" ]]; then
#          platform ssh --app=frontend-gifts "./node_modules/.bin/eslint ./src/"
#        fi
      #################################################
      ########## DONATIONS BACKEND CODE REVIEW ########
      #################################################

      # Drupal coding standards &  best practice compliance.
#      - |
#        if [[ $GIT_CHANGES == *"backend-donations"* || $CIRCLE_BRANCH == "stage" ]]; then
#          ./vendor/bin/phpcs --error-severity=1 --warning-severity=5 --standard=Drupal,DrupalPractice ./backend-donations/web/modules/custom
#        fi
  override:
    ################################################
    ############# ABI BUS TESTING ##################
    ################################################
    # Always run.
    # TODO: review failing tests and enable back.
    #- |
    #  if [ $CIRCLE_BRANCH != "master" ]; then
    #    ./vendor/bin/codecept run api  -c ./backend-api-bus/tests/codeception --debug || true
    #    ./vendor/bin/codecept run api  -c ./backend-api-bus/tests/codeception --debug -g failed
    #  fi

    ################################################
    ############## GIFTS TESTING ###################
    ################################################
    # Run backend/frontend gifts acceptance tests.
    - |
      if [ $CIRCLE_BRANCH != "master" ] && [[ $GIT_CHANGES == *"backend-gifts"* || $GIT_CHANGES == *"frontend-gifts"* || $CIRCLE_BRANCH == "stage" ]]; then
        ./vendor/bin/codecept run acceptance  -c ./backend-gifts/tests/codeception --debug --env=phantom-circle,chrome || true
        ./vendor/bin/codecept run acceptance  -c ./backend-gifts/tests/codeception --debug --env=phantom-circle,chrome -g failed
      fi

    ################################################
    ########## DONATIONS BACKEND TESTING ###########
    ################################################

    # Run Unit tests on Platform.sh to get access to database.
#    - |
#      if [[ $GIT_CHANGES == *"backend-donations"* || $CIRCLE_BRANCH == "stage" ]]; then
#        platform ssh --project=$PLATFORM_PROJECT_NAME --environment=$CIRCLE_BRANCH --app=backend-donations "./vendor/bin/codecept run unit -c tests/codeception --debug"
#      fi
    # Run API tests.
#    - |
#      if [[ $GIT_CHANGES == *"backend-donations"* || $CIRCLE_BRANCH == "stage" ]]; then
#        ./vendor/bin/codecept run api -c ./backend-donations/tests/codeception --debug
#      fi
    # Run Acceptance tests.
#    - |
#      if [[ $GIT_CHANGES == *"backend-donations"* || $CIRCLE_BRANCH == "stage" ]]; then
#        ./vendor/bin/codecept run acceptance -c ./backend-donations/tests/codeception --debug --env=phantom-circle
#      fi
